// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/autom8ter/grpcx/providers (interfaces: Auth)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	providers "github.com/autom8ter/grpcx/providers"
	gomock "github.com/golang/mock/gomock"
	auth "github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/auth"
	viper "github.com/spf13/viper"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockAuth) Auth(arg0 *viper.Viper, arg1 providers.All) auth.AuthFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", arg0, arg1)
	ret0, _ := ret[0].(auth.AuthFunc)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockAuthMockRecorder) Auth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAuth)(nil).Auth), arg0, arg1)
}
