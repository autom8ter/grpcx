// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/autom8ter/grpcx/providers/context_tagger (interfaces: ContextTagger)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// MockContextTagger is a mock of ContextTagger interface.
type MockContextTagger struct {
	ctrl     *gomock.Controller
	recorder *MockContextTaggerMockRecorder
}

// MockContextTaggerMockRecorder is the mock recorder for MockContextTagger.
type MockContextTaggerMockRecorder struct {
	mock *MockContextTagger
}

// NewMockContextTagger creates a new mock instance.
func NewMockContextTagger(ctrl *gomock.Controller) *MockContextTagger {
	mock := &MockContextTagger{ctrl: ctrl}
	mock.recorder = &MockContextTaggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextTagger) EXPECT() *MockContextTaggerMockRecorder {
	return m.recorder
}

// TagContext mocks base method.
func (m *MockContextTagger) TagContext(arg0 context.Context, arg1, arg2 string, arg3 metadata.MD) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagContext", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// TagContext indicates an expected call of TagContext.
func (mr *MockContextTaggerMockRecorder) TagContext(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagContext", reflect.TypeOf((*MockContextTagger)(nil).TagContext), arg0, arg1, arg2, arg3)
}
